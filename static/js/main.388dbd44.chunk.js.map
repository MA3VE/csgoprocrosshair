{"version":3,"sources":["components/matthew.png","components/PlayerCard.js","components/Acc.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayerCard","Card","Image","src","require","wrapped","Content","Header","this","props","player","extra","Button","fluid","Component","Acc","state","active","Accordion","Title","style","textAlign","padding","marginBottom","onClick","setState","team","Grid","Row","stackable","columns","Column","players","HomePage","temp","i","push","styled","href","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,qC,sMCqB5BC,EAlBf,uKAEQ,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAKC,EAAQ,KAAkBC,SAAO,IAC7C,kBAACJ,EAAA,EAAKK,QAAN,KACI,kBAACL,EAAA,EAAKM,OAAN,KAAcC,KAAKC,MAAMC,SAE7B,kBAACT,EAAA,EAAKK,QAAN,CAAcK,OAAK,GACf,kBAACC,EAAA,EAAD,CAAQC,OAAK,GAAb,yBAVxB,GAAgCC,aCCnBC,EAAb,kDACI,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CACTC,QAAQ,GAJG,EADvB,qDASc,IAAD,OACL,OACI,6BACI,kBAACC,EAAA,EAAUC,MAAX,CAGIC,MAAO,CACHC,UAAW,OACXC,QAAS,EACTC,aAAc,QAIlB,kBAACX,EAAA,EAAD,CACIC,OAAK,EACLW,QAAS,WACL,EAAKC,SAAS,CAAER,QAAS,EAAKD,MAAMC,WAGvCT,KAAKC,MAAMiB,OAGpB,kBAACR,EAAA,EAAUZ,QAAX,CAAmBW,OAAQT,KAAKQ,MAAMC,QAClC,kBAACU,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,WAAS,EAACC,QAAS,GACzB,kBAACH,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,CAAYrB,OAAQF,KAAKC,MAAMuB,QAAQ,MAE3C,kBAACL,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,CAAYrB,OAAQF,KAAKC,MAAMuB,QAAQ,MAE3C,kBAACL,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,CAAYrB,OAAQF,KAAKC,MAAMuB,QAAQ,MAE3C,kBAACL,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,CAAYrB,OAAQF,KAAKC,MAAMuB,QAAQ,MAE3C,kBAACL,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,CAAYrB,OAAQF,KAAKC,MAAMuB,QAAQ,cA/CvE,GAAyBlB,aCoCVmB,EAhCf,kDACI,WAAYxB,GAAQ,IAAD,sBACf,cAAMA,GAEN,IADA,IAAIyB,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAKE,MAAK,GAJC,OAMf,EAAKpB,MAAQ,CACTC,OAAQiB,GAPG,EADvB,qDAaQ,IAAIA,EAAO,GACX,IAAK,IAAIR,KAAQM,EACbE,EAAKE,KAAK,kBAAC,EAAD,CAAKV,KAAMA,EAAMM,QAASA,EAAQN,MAGhD,OACI,6BACI,2CACgB,6BADhB,eAGA,kBAACR,EAAA,EAAD,CAAWL,OAAK,EAACwB,QAAM,GAClBH,GAEL,kBAAC,IAAD,CAAcI,KAAK,mDA1BnC,GAA8BxB,a,SCMfyB,EAVf,uKAEQ,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,WAJhB,GAAyB1B,aCQL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.388dbd44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/matthew.046e91f7.png\";","import React, { Component } from \"react\";\r\nimport { Card, Image, Button } from \"semantic-ui-react\";\r\n\r\nexport class PlayerCard extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Image src={require(\"./matthew.png\")} wrapped />\r\n                    <Card.Content>\r\n                        <Card.Header>{this.props.player}</Card.Header>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <Button fluid>Copy Crosshair</Button>\r\n                    </Card.Content>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerCard;\r\n","import React, { Component } from \"react\";\r\nimport { Accordion, Icon, Grid, Button } from \"semantic-ui-react\";\r\nimport PlayerCard from \"./PlayerCard\";\r\n\r\nexport class Acc extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            active: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Accordion.Title\r\n                    // active={this.statet}\r\n                    // index={0}\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        padding: 0,\r\n                        marginBottom: \"5px\",\r\n                    }}\r\n                >\r\n                    {/* <Icon name=\"dropdown\" /> */}\r\n                    <Button\r\n                        fluid\r\n                        onClick={() => {\r\n                            this.setState({ active: !this.state.active });\r\n                        }}\r\n                    >\r\n                        {this.props.team}\r\n                    </Button>\r\n                </Accordion.Title>\r\n                <Accordion.Content active={this.state.active}>\r\n                    <Grid>\r\n                        <Grid.Row stackable columns={5}>\r\n                            <Grid.Column>\r\n                                <PlayerCard player={this.props.players[0]} />\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <PlayerCard player={this.props.players[1]} />\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <PlayerCard player={this.props.players[2]} />\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <PlayerCard player={this.props.players[3]} />\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <PlayerCard player={this.props.players[4]} />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n\r\n                    {/* {this.props.content} */}\r\n                    {/* {console.log(this.props.getActiveIndex())} */}\r\n                </Accordion.Content>\r\n                {/* {console.log(this.props.team)} */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Acc;\r\n","import React, { Component } from \"react\";\r\nimport { Accordion, Segment } from \"semantic-ui-react\";\r\nimport GithubCorner from \"react-github-corner\";\r\nimport players from \"./players.json\";\r\nimport \"./style.css\";\r\n\r\nimport { Acc } from \"./Acc\";\r\n\r\nexport class HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let temp = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            temp.push(false);\r\n        }\r\n        this.state = {\r\n            active: temp,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let temp = [];\r\n        for (let team in players) {\r\n            temp.push(<Acc team={team} players={players[team]} />);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    Pro Players <br /> Crosshairs\r\n                </h1>\r\n                <Accordion fluid styled>\r\n                    {temp}\r\n                </Accordion>\r\n                <GithubCorner href=\"https://github.com/MA3VE/csgoprocrosshair\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from \"react\";\nimport HomePage from \"./components/HomePage\";\nimport { Container } from \"semantic-ui-react\";\n\nexport class App extends Component {\n    render() {\n        return (\n            <Container>\n                <HomePage />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}